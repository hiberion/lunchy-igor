package igor.lunchy;

import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.pdfbox.pdmodel.PDDocument;

//import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import entities.MenuItemPersonalOrder;
import entities.PersonalOrder;


public class PrintOrder2 {
  private static String FILE = "GeneralOrder.pdf";
  private static String FILE2 = "PersonalOrders.pdf";
  private static String FONT_LOCATION = "arial.ttf"; ///////// Font Location
  private static BaseFont baseFont;
  private static double generalOrderSum = 0;
  /*private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);*/
  
  private static ArrayList<String[]> workData;
  
  public static void setGeneralOrderSum(double sum) {
	  generalOrderSum = sum;
  }

  public static void printGeneralOrder(ArrayList<String[]> data) {
	  try {
		  baseFont = BaseFont.createFont(FONT_LOCATION, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
		  //arialFont = new Font(baseFont, 21, Font.NORMAL);
		  workData = data;
		  Document document = new Document();
	      PdfWriter.getInstance(document, new FileOutputStream(FILE));
	      document.open();
	      addMetaData(document);
	      //addTitlePage(document);
	      addContent(document);
	      document.close();
	      
	      PDDocument doc = null;
	      doc = PDDocument.load(FILE);
	      doc.print();
		  
	  } catch (Exception e) {
		  e.printStackTrace();
	  }
  }
  
  public static void printPersonalOrders() {
	  try {
		  Logger logger = Logger.getLogger("org.apache.pdfbox");
		  logger.setLevel(Level.SEVERE);
		  
		  baseFont = BaseFont.createFont(FONT_LOCATION, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
		  //arialFont = new Font(baseFont, 21, Font.NORMAL);
		  //workData = data;
		  Document document = new Document();
	      PdfWriter.getInstance(document, new FileOutputStream(FILE2));
	      document.open();
	      addMetaData2(document);
	      //addTitlePage(document);
	      addContent2(document);
	      document.close();	
	      
	      PDDocument doc = null;
	      doc = PDDocument.load(FILE2);
	      doc.print();
		  
	  } catch (Exception e) {
		  e.printStackTrace();
	  }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document document) {
    document.addTitle("General Order");
    document.addSubject("General Order");
    document.addAuthor("Lunchy");
    document.addCreator("Lunchy");
  }
  
  private static void addMetaData2(Document document) {
	    document.addTitle("Personal Orders");
	    document.addSubject("Personal Orders");
	    document.addAuthor("Lunchy");
	    document.addCreator("Lunchy");
	  }
  

  private static void addContent(Document document) throws DocumentException {
	  	  
	  Font captFont = new Font(baseFont, 18, Font.BOLD);
	  Font italicFont = new Font(baseFont, 8, Font.ITALIC);
	  //Font workFont = new Font(baseFont, 14, Font.NORMAL);
	  Font workFont2 = new Font(baseFont, 14, Font.BOLD);
	  
	  
	  Chapter mainChapter = new Chapter(1);
	  
	  // Preface
	  Paragraph preface = new Paragraph();
	  addEmptyLine(preface, 1);
	  preface.add(new Paragraph("General Order (Общий заказ):", captFont));
	  addEmptyLine(preface, 1);	  
	  preface.add(new Paragraph("Report generated by: " + new Date(), italicFont));
	  addEmptyLine(preface, 2);
	  mainChapter.add(preface);
	  
	  // Table of data
	  Paragraph tablePara = new Paragraph("Ordered menu items (Заказанные позиции меню):", workFont2);
	  addEmptyLine(tablePara, 1);
	  Section tableSection = mainChapter.addSection(tablePara, 0);
	  //tableSection = mainChapter.addSection(tablePara);
	  
	  createTable(tableSection, workData);
	  
	  //addEmptyLine(tablePara, 1);
	  Paragraph orderSum = new Paragraph("Total Order sum (Общая сумма заказа): " + String.valueOf(generalOrderSum), workFont2);
	  mainChapter.add(orderSum);
	  //PdfPTable table = createTable222();
	  //document.add(table);
	  document.add(mainChapter);
  }
  
  private static void addContent2(Document document) throws DocumentException {
  	  
	  Font captFont = new Font(baseFont, 18, Font.BOLD);
	  Font italicFont = new Font(baseFont, 8, Font.ITALIC);
	  //Font workFont = new Font(baseFont, 14, Font.NORMAL);
	  Font workFont2 = new Font(baseFont, 14, Font.BOLD);
	  
	  
	  Chapter mainChapter = new Chapter(1);
	  
	  // Preface
	  Paragraph preface = new Paragraph();
	  addEmptyLine(preface, 1);
	  preface.add(new Paragraph("Personal orders (Персональные заказы):", captFont));
	  addEmptyLine(preface, 1);	  
	  preface.add(new Paragraph("Report generated by: " + new Date(), italicFont));
	  addEmptyLine(preface, 2);
	  mainChapter.add(preface);
	  
	  int curGeneralOrderID = 4;
	  //int workerID = 0;
	  for (PersonalOrder po: LunchyMain.personalOrderDAO.getAllPersonalOrder()) {
			if (po.getGeneralOrderId() == curGeneralOrderID) {
				Paragraph namePar = new Paragraph(LunchyMain.workerDAO.getWorkerByID(po.getWorkerId()).getName() + ":", workFont2);
				addEmptyLine(namePar, 1);
				Section tableSection = mainChapter.addSection(namePar, 0);
				
				ArrayList<String[]> printData = new ArrayList<>();
				for (MenuItemPersonalOrder mi_po : LunchyMain.menuItemPersonalOrderDAO.getAllMenuItemPersonalOrder()) {
					
					if (mi_po.getPersonalOrderId() == po.getId()) {
						
						String[] data = new String[5];
						data[0] = String.valueOf(mi_po.getMenuItemId());
						data[1] = LunchyMain.menuItemDAO.getAllMenuItem().get(mi_po.getMenuItemId()).getName();
						data[2] = LunchyMain.categoryDAO.getAllCategory().get(LunchyMain.menuItemDAO.getAllMenuItem().get(mi_po.getMenuItemId()).getCategory()).getName();
						data[3] = String.valueOf((LunchyMain.menuItemDAO.getAllMenuItem().get(mi_po.getMenuItemId()).getPrice()) * (mi_po.getItemCount()));
						data[4] = String.valueOf(mi_po.getItemCount());
						printData.add(data);
					}
				}
				createTable2(tableSection, printData);
			}
		}
	  
	  /*// Table of data
	  Paragraph tablePara = new Paragraph(" menu items (Заказанные позиции меню):", workFont2);
	  addEmptyLine(tablePara, 1);
	  Section tableSection = mainChapter.addSection(tablePara, 0);
	  //tableSection = mainChapter.addSection(tablePara);
	  
	  createTable(tableSection, workData);
	  
	  //addEmptyLine(tablePara, 1);
	  Paragraph orderSum = new Paragraph("Total Order sum (Общая сумма заказа): " + String.valueOf(generalOrderSum), workFont2);
	  mainChapter.add(orderSum);*/
	  //PdfPTable table = createTable222();
	  //document.add(table);
	  document.add(mainChapter);
  }
  
  
private static void createTable2(Section section, ArrayList<String[]> data) throws DocumentException {
	  
	  Font workFont = new Font(baseFont, 12, Font.BOLD);
	  Font workFont2 = new Font(baseFont, 12, Font.NORMAL);
	  
	  PdfPTable table = new PdfPTable(5);
	  table.setWidthPercentage(100);
	  table.setWidths(new int[] {1, 5, 3, 2, 3});
	  
	  PdfPCell c1 = new PdfPCell(new Phrase("ID", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      c1.setFixedHeight(30);
      table.addCell(c1);

      c1 = new PdfPCell(new Phrase("Название", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      c1 = new PdfPCell(new Phrase("Категория", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      c1 = new PdfPCell(new Phrase("Цена, руб.", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      c1 = new PdfPCell(new Phrase("Количество", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      table.setHeaderRows(1);

      
      for (String[] str : data) {
      	for (int i = 0; i < str.length; i++) {
      		PdfPCell cell = new PdfPCell(new Phrase(str[i], workFont2));
      		cell.setFixedHeight(30);
      		if (i == 1)
      			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
      		else
      			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_CENTER);
      		table.addCell(cell);
      	}
      }
      
      //table.setTotalWidth(40);
      //System.out.println(table.getWidthPercentage());
      
      section.add(table);
      Paragraph paragraph = new Paragraph();
      addEmptyLine(paragraph, 1);
      section.add(paragraph);

  }


private static void createTable(Section section, ArrayList<String[]> data) throws DocumentException {
	  
	  Font workFont = new Font(baseFont, 12, Font.BOLD);
	  Font workFont2 = new Font(baseFont, 12, Font.NORMAL);
	  
	  PdfPTable table = new PdfPTable(6);
	  table.setWidthPercentage(100);
	  table.setWidths(new int[] {1, 5, 3, 2, 3, 2});
	  
	  PdfPCell c1 = new PdfPCell(new Phrase("ID", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);

      c1 = new PdfPCell(new Phrase("Название", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      c1 = new PdfPCell(new Phrase("Категория", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      c1 = new PdfPCell(new Phrase("Цена, руб.", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      c1 = new PdfPCell(new Phrase("Количество", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      
      c1 = new PdfPCell(new Phrase("Общая стоимость", workFont));
      c1.setHorizontalAlignment(Element.ALIGN_CENTER);
      c1.setVerticalAlignment(Element.ALIGN_CENTER);
      table.addCell(c1);
      table.setHeaderRows(1);

      
      for (String[] str : data) {
      	for (int i = 0; i < str.length; i++) {
      		PdfPCell cell = new PdfPCell(new Phrase(str[i], workFont2));
      		cell.setFixedHeight(30);
      		if (i == 1)
      			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
      		else
      			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_CENTER);
      		table.addCell(cell);
      	}
      }
      
      //table.setTotalWidth(40);
      //System.out.println(table.getWidthPercentage());
      
      section.add(table);

  }



  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
} 
