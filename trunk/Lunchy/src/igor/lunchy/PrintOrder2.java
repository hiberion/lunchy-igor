package igor.lunchy;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
//import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;


public class PrintOrder2 {
  private static String FILE = "GeneralOrderPdf.pdf";
  private static String FONT_LOCATION = "arial.ttf"; ///////// Font Location
  /*private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);*/
  
  private static ArrayList<String[]> workData;

  public static void printGeneralOrder(ArrayList<String[]> data) {
    try {
    	workData = data;
    	/*
    	BaseFont baseFont = BaseFont.createFont(FONT_LOCATION, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
    	Font myFont = new Font(baseFont, 21, Font.NORMAL);*/
    	Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(FILE));
      document.open();
      addMetaData(document);
      addTitlePage(document);
      addContent(document);
      
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document document) {
    document.addTitle("General Order");
    document.addSubject("General Order");
    document.addAuthor("Lunchy");
    document.addCreator("Lunchy");
  }

  private static void addTitlePage(Document document)
      throws DocumentException {
    Paragraph preface = new Paragraph();
   
    Font myFont = null;
    
    try {
    	BaseFont baseFont = BaseFont.createFont(FONT_LOCATION, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
    	myFont = new Font(baseFont, 21, Font.NORMAL);
    	myFont.setSize(10);
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
        
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("Title.General Order.Русский:", myFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph("Title.Report generated by.Русский: " + new Date(), myFont));

    //addEmptyLine(preface, 8);
    document.add(preface);
    // Start a new page
    //document.newPage();
  }

  private static void addContent(Document document) throws DocumentException {
    
    Font myFont2 = null;
    
    try {
		BaseFont baseFont2 = BaseFont.createFont(FONT_LOCATION, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
		myFont2 = new Font(baseFont2, 21, Font.NORMAL);
		myFont2.setSize(10);
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    
    Anchor anchor = new Anchor("Anchor.First Chapter.Русский", myFont2);
    anchor.setName("Anchor.SetName.First Chapter.Русский");
	
    if (myFont2 == null)
    	System.out.println("Nulllllll");

    // Second parameter is the number of the chapter
    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

    Paragraph subPara = new Paragraph("subPara.Subcategory Русский", myFont2);
    Section subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Hello русский", myFont2));

    subPara = new Paragraph("Subcategory 2 русский", myFont2);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Paragr русский", myFont2));
    subCatPart.add(new Paragraph("Paragraph 2 русский", myFont2));
    subCatPart.add(new Paragraph("Paragraph 3 русский", myFont2));

    // Add a list
    createList(subCatPart);
    Paragraph paragraph = new Paragraph("", myFont2);
    addEmptyLine(paragraph, 5);
    subCatPart.add(paragraph);

    // Add a table
    createTable(subCatPart, workData);

    // Now add all this to the document
    document.add(catPart);

    // Next section
    anchor = new Anchor("Anchor.Second Chapter русский", myFont2);
    anchor.setName("Anchor.Second Chapter русский");

    // Second parameter is the number of the chapter
    catPart = new Chapter(new Paragraph(anchor), 1);

    subPara = new Paragraph("subPara.Subcategory русский", myFont2);
    subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("subCatPart.This is a very important message русский"));

    // Now add all this to the document
    document.add(catPart);

  }

  private static void createTable(Section subCatPart, ArrayList<String[]> data)
      throws BadElementException {
    PdfPTable table = new PdfPTable(6);
    
    Font myFont2 = null;
    
    try {
		BaseFont baseFont2 = BaseFont.createFont(FONT_LOCATION, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
		myFont2 = new Font(baseFont2, 21, Font.NORMAL);
		myFont2.setSize(10);
	} catch (IOException | DocumentException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

    // t.setBorderColor(BaseColor.GRAY);
    // t.setPadding(4);
    // t.setSpacing(4);
    // t.setBorderWidth(1);

    PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1 русский", myFont2));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 2 русский", myFont2));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Table Header 3 русский", myFont2));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    
    c1 = new PdfPCell(new Phrase("Table Header 4 русский", myFont2));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    
    c1 = new PdfPCell(new Phrase("Table Header 5 русский", myFont2));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    
    c1 = new PdfPCell(new Phrase("Table Header 6 русский", myFont2));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    table.setHeaderRows(1);

    
    for (String[] str : data) {
    	for (int i = 0; i < str.length; i++) {
    		PdfPCell cell = new PdfPCell(new Phrase(str[i], myFont2));
    		table.addCell(cell);
    	}
    }
    
    /*table.addCell("1.0");
    table.addCell("1.1");
    table.addCell("1.2");
    table.addCell("2.1");
    table.addCell("2.2");
    table.addCell("2.3");*/
    
    /*for (String[] str : data) {
		String testString2 = str[0] + " " + str[1] + " " + str[2] + " " + str[3] + " " + str[4] +
				" " + str[5];*/

    subCatPart.add(table);

  }

  private static void createList(Section subCatPart) {
    List list = new List(true, false, 10);
    list.add(new ListItem("First point русский"));
    list.add(new ListItem("Second point русский"));
    list.add(new ListItem("Third point русский"));
    subCatPart.add(list);
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
} 
